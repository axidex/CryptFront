package template

import "front/internal/models"

templ Header() {
	<head>
		<script src="https://cdn.tailwindcss.com"></script>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
	</head>
}

script fetchModelFields(sourceElement, destinationElement string) {
	const model = document.getElementById(sourceElement).value;
	fetch('/model-fields', {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify({ model })
	})
	.then(response => response.text())
	.then(html => {
		document.getElementById(destinationElement).innerHTML = html;
	});
}

script submitModelData(modelNameElement, sourceElement, destinationElement string) {
	const model = document.getElementById(sourceElement).value;
	if (!model) {
		alert('Choose a model first.');
		return;
	}
	const fields = document.querySelectorAll(modelNameElement);
	const data = {};
	fields.forEach(field => {
		data[field.name] = field.value;
	});
	fetch('/send-to-api', {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify({ model, data })
	})
	.then(response => response.text())
	.then(html => {
		if (html) {
			document.getElementById(destinationElement).innerHTML = html.replace(/\n/g, '<br>');
		}
	})
	.catch(() => {
		alert('Error when connecting to API.');
	});
}

templ Home(appModels map[string]models.Route) {
	@Header()
	<main class="min-h-screen w-full p-2">
		<div class="solver-selector" id="solver-selector">
			<select
				class="solver-selector-select w-full py-2 px-4 border border-gray-300 rounded-lg text-gray-700 bg-white shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 shadow-md"
				id="solver-selector-select"
				onchange={ fetchModelFields("solver-selector-select", "solver-info") }
			>
				<option value="">Choose...</option>
				for m, _ := range appModels {
					<option value={ m }>{ m }</option>
				}
			</select>
		</div>
		<div
			class="solver-info-content mt-3 w-full border border-[#ddd] rounded-[8px] shadow-[0_2px_4px_rgba(0,0,0,0.1)] bg-gray-100 p-[10px] text-center shadow-md"
			id="solver-info"
		>
			Choose Problem to see fields
		</div>
		<div class="solver-solve">
			<button
				class="solver-solve-button mt-3 py-1 px-4 w-full h-10 rounded-lg text-white bg-zinc-900 hover:bg-zinc-800 active:bg-zinc-600 shadow-md"
				onclick={ submitModelData("#solver-info input", "solver-selector-select", "solver-solution") }
			>Solve</button>
		</div>
		<div
			class="solver-solution mt-3 w-full border border-[#ddd] rounded-[8px] shadow-[0_2px_4px_rgba(0,0,0,0.1)] bg-gray-100 p-[10px] text-left shadow-md"
			id="solver-solution"
		></div>
	</main>
}

templ Problem(route models.Route) {
	for key, example := range route.Params {
		<label
			class="solver-info-content-label w-[95%] block m-[5px_auto]"
			id="solver-info-content-label"
		>
			{ key }
			<input
				class="solver-info-content-label w-[95%] block m-[5px_auto_auto_auto] border border-gray-300 rounded-[8px] p-[10px] shadow-md"
				type="text"
				name={ key }
				value={ example }
			/>
		</label>
	}
}
